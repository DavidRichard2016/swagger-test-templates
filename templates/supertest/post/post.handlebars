  it('should respond with {{description}}', function(done) {
      {{#unless noSchema}}
      /*eslint-disable*/
      {{> schema-partial this}}

      /*eslint-enable*/
      {{/unless}}
      api.post('{{path}}')
      .set('Accept', '{{contentType}}')
      {{#if headerParameters}}
      .set({
        {{#each headerParameters}}
        {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
        {{/each}}
      })
      {{/if}}
      {{#is contentType 'application/json'}}
      .send({
        {{#each bodyParameters}}
        {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
        {{/each}}
      })
      {{/is}}
      {{#is contentType 'application/x-www-form-urlencoded'}}
      .send({
      {{#each formParameters}}
          {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
      {{/each}}
      })
      {{/is}}
      {{#is contentType 'multipart/form-data'}}
      .send({
      {{#each formParameters}}
          {{this.name}}: 'DATA GOES HERE'{{#unless @last}},{{/unless}}
      {{/each}}
      })
      {{/is}}
      .expect({{responseCode}})
      .end(function(err, res) {
        if (err) {
          done(err);
          return;
        }
        {{#if noSchema}}
            {{#is ../assertion 'expect'}}
        expect(res).to.equal(null);
            {{/is}}
            {{#is ../assertion 'should'}}
        res.should.equal(null);
            {{/is}}
            {{#is ../assertion 'assert'}}
        assert.isNull(res);
            {{/is}}
        {{/if}}
        {{#unless noSchema}}
            {{#is ../assertion 'expect'}}
        expect(validator.validate(res, schema)).to.be.true;

            {{/is}}
            {{#is ../assertion 'should'}}
        validator.validate(res, schema).should.be.true;

            {{/is}}
            {{#is ../assertion 'assert'}}
        assert.true(validator.validate(res, schema));
            {{/is}}
        {{/unless}}
        done();
      });
    });
